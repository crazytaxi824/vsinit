{
  // NOTE important, ts string 单引号
  "prettier.singleQuote": true,

  // 开启/关闭 eslint
  // "eslint.enable": false,

  // 在 OUTPUT -> ESlint 频道打印 debug 信息. 用于配置 eslint.
  "eslint.debug": true,

  // save 的时候运行 eslint
  "eslint.run": "onSave",

  // eslint 检查文件类型
  "eslint.validate": ["typescriptreact", "typescript", "javascriptreact", "javascript"],

  // eslint 自动修复
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },

  // eslint 配置文件地址
  // https://eslint.org/docs/developer-guide/nodejs-api#eslint-class
  "eslint.useESLintClass": true, // 必须使用 class API, eslint.options 中才能够使用 overrideConfigFile
  "eslint.options": {
    // 全局配置文件必须是 "/" 开头的绝对路径, 否则会被认为是相对 `项目根目录` 的地址. eg: `~/xxx` 会被解析成 `project/~/xxx` 地址.
    // 本地配置文件是以项目根目录为相对路径的. 可以省略 `${workspaceRoot}`, 且无法解析 `${workspaceRoot}` 路径.
    "overrideConfigFile": "eslintrc-ts.json"
  },

  // search.exclude 用来忽略搜索的文件夹
  // files.exclude 用来忽略工程打开的文件夹
  // 直接写文件/文件夹名字就实在项目根路径下进行匹配, 不要用 / ./ 开头,
  // **/所有路径下进行匹配
  "search.exclude": {
    ".idea": true,
    "*.iml": true,
    "out": true, // ts -> js 文件夹
    "dist": true, // ts -> js 文件夹
    "coverage": true, // 'jest --coverage' 命令生成的文件夹
    "**/vendor": true,
    "node_modules": true,
    ".vscode": true,
    ".history": true // history 插件产生的历史文件
  },

  // files.exclude 不显示文件,
  // 直接写文件/文件夹名字就实在项目根路径下进行匹配, 不要用 / ./ 开头,
  // **/所有路径下进行匹配
  "files.exclude": {
    ".idea": true
  }
}
